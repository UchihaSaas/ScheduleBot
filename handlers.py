import requests
from bs4 import BeautifulSoup
from connect import bot,dp
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from btns import kb,ink,ink_odd,ink_today
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from grouplist import groups_list

class ScheduleState(StatesGroup):
    waitin_for_day = State()
    waitin_for_group = State()
    waitin_for_week = State()
    waitin_for_today = State()


@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await bot.send_message(text= 'Whats upü´°',chat_id=message.from_user.id, reply_markup=kb)
    await message.delete()


@dp.message_handler(commands=['–≤—ã–∫–ª—é—á–∏—Ç—å'])
async def cancel_bot(message:types.Message):
     await bot.send_message(text= '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞üò¥',chat_id=message.from_user.id,reply_markup=ReplyKeyboardRemove())
     await message.delete()


@dp.message_handler(commands=['—Å–µ–≥–æ–¥–Ω—è'])
async def get_today(message:types.Message,state: FSMContext):
    data = await state.get_data()
    usergroup = data.get('group')
    if usergroup:
        url = "https://elkaf.kubstu.ru/timetable/default/time-table-student-ofo?iskiosk=0&fak_id=516&kurs=2&gr=22-%D0%9A-%D0%9A%D0%911&ugod=2023&semestr=1"
        responce = requests.get(url)
        soup = BeautifulSoup(responce.text,'lxml')
        today = soup.find('p',style = 'font-style: normal;').text
        p = today.split(";")
        await message.answer(today,reply_markup=ink_today)
        chet_today = p[2].split(' ')[-1]
        week_today = p[3].split(' ')[-1].lower()
        await state.update_data(chet_ = chet_today)
        await state.update_data(week =week_today)
        await message.delete()
        await ScheduleState.waitin_for_today.set()
    else:
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')


@dp.message_handler(commands=['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
async def cmd_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    usergroup = data.get('group')
    if usergroup:
        await message.answer(f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: ü•∂<b>{usergroup}</b>ü•∂ .–í—ã –≤—ã–±—Ä–∞–ª–∏üëâ <u> {data['week_odd']} </u>üëà–Ω–µ–¥–µ–ª—é –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",reply_markup=ink,parse_mode='HTML')
        await ScheduleState.waitin_for_day.set()
        await message.delete()
    else:
        await message.answer(r"–ì—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞üõë. –í–≤–µ–¥–∏—Ç–µ /–≥—Ä—É–ø–ø–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã.")
        await message.delete()


@dp.message_handler(state=ScheduleState.waitin_for_group)
async def set_group(message: types.Message, state: FSMContext):
    if message.text not in groups_list:
        await message.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Çüòî, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
    else:
        await state.update_data(group=message.text)
        await state.reset_state(with_data=False)
        await message.answer("–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ. –ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /–Ω–µ–¥–µ–ª—è")

@dp.message_handler(commands=['–≥—Ä—É–ø–ø–∞'])
async def cmd_group(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:")
    await ScheduleState.waitin_for_group.set()
    await message.delete()
@dp.message_handler(commands=['–Ω–µ–¥–µ–ª—è'])
async def week_parity(message: types.Message,state:FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏",reply_markup=ink_odd)
    await ScheduleState.waitin_for_week.set()
    await message.delete()


@dp.message_handler(commands=['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'])
async def cmd_info(message: types.Message, state: FSMContext):
    info_text = """
    –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /—Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ
    –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–µ–¥–∏—Ç–µ /–≤—ã–∫–ª—é—á–∏—Ç—å
    –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥–∏—Ç–µ /–≥—Ä—É–ø–ø–∞
    –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /–Ω–µ–¥–µ–ª—è
    –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –≤–≤–µ–¥–∏—Ç–µ /—Å–µ–≥–æ–¥–Ω—è
    """
    await message.answer(info_text)
    await message.delete()